#!/usr/bin/python3
"""
World Module - Mode tests
Tests user mode +y behavior (channels loaded from config only)
"""

import irctestframework.irctest
import time

def log_test_start(test_name):
    """Log the start of a test"""
    print(f"[TEST] {test_name}")
    print(f"[LOG] Starting test: {test_name} at {time.strftime('%H:%M:%S')}")

def log_command(client, command):
    """Log a command being sent"""
    print(f"[LOG] Sending to {client.name}: {command}")

def log_response(client, description, response):
    """Log a response received"""
    print(f"[LOG] {client.name} received {description}: {response}")

def log_test_end(test_name, success=True):
    """Log the end of a test"""
    status = "PASSED" if success else "FAILED"
    print(f"[LOG] Test '{test_name}' {status} at {time.strftime('%H:%M:%S')}")
    print()

print("=" * 60)
print("WORLD MODULE - MODE TESTS")
print("=" * 60)
print(f"Test suite started at: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for world to work
c1a = m.new('c1a')
c1b = m.new('c1b')
c1c = m.new('c1c')
print(f"[LOG] Created test clients: c1a={c1a.name}, c1b={c1b.name}, c1c={c1c.name}")
m.connect()
print(f"[LOG] Connected to IRC server")
print()

# Setup: Request capability
log_test_start("Capability Request")
log_command(c1a, "CAP REQ :world/features")
m.send(c1a, "CAP REQ :world/features")
# Check if capability is available (ACK) or not (NAK)
resp = m.expect(c1a, "Capability response", ".*ACK.*world/features|.*NAK.*world/features")
log_response(c1a, "capability response", resp)
if "NAK" in str(resp):
    print("SKIP: World module not loaded - capability NAK'd")
    print("All mode tests skipped - module not available")
    exit(0)
print(f"[LOG] World module capability confirmed - proceeding with mode tests")
m.clearlog()
log_test_end("Capability Request")

m.send(c1b, "CAP REQ :world/features")
m.expect(c1b, "Capability acknowledged", ".*ACK.*world/features")
m.clearlog()

m.send(c1c, "CAP REQ :world/features")
m.expect(c1c, "Capability acknowledged", ".*ACK.*world/features")
m.clearlog()

# Test 1: Verify world channels are created from config
print("[TEST] World channels created from config")
m.send(c1a, "JOIN #spawn")
m.expect(c1a, "Joined spawn channel", ".*JOIN.*#spawn")
m.clearlog()
print()

# Test 2: User mode +y auto-set on WORLD join
print("[TEST] User mode +y auto-set on WORLD join")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join success", ":.*2200.*")
m.expect(c1a, "User mode +y set", "MODE.*\\+y")
m.clearlog()
print()

# Test 3: Multiple users can join world
print("[TEST] Multiple users join world")
m.send(c1b, "JOIN #spawn")
m.send(c1b, "WORLD join")
m.expect(c1b, "World join success", ":.*2200.*")
m.expect(c1b, "User mode +y set", "MODE.*\\+y")
m.clearlog()
print()

# Test 4: Third user joins
print("[TEST] Third user joins world")
m.send(c1c, "JOIN #spawn")
m.send(c1c, "WORLD join")
m.expect(c1c, "World join success", ":.*2200.*")
m.expect(c1c, "User mode +y set", "MODE.*\\+y")
m.clearlog()
print()

# Test 5: Users can communicate in world
print("[TEST] Users can communicate in world")
m.send(c1a, "PRIVMSG #spawn :hello world!")
m.expect(c1a, "c1a sees message", "PRIVMSG.*hello")
m.expect(c1b, "c1b sees message", "PRIVMSG.*hello")
m.expect(c1c, "c1c sees message", "PRIVMSG.*hello")
m.clearlog()
print()

# Test 6: User mode +y auto-removed on WORLD part
print("[TEST] User mode +y auto-removed on WORLD part")
m.send(c1c, "WORLD part")
m.expect(c1c, "World part success", ":.*2201.*")
m.expect(c1c, "User mode +y removed", "MODE.*-y")
m.clearlog()
print()

# Test 7: User without world mode cannot speak
print("[TEST] User without world mode cannot speak")
m.send(c1c, "PRIVMSG #spawn :test")
m.expect(c1c, "Cannot speak", ".*ERR.*world.*")
m.clearlog()
print()

# Test 8: User mode +y broadcast to other users
print("[TEST] User mode +y broadcast")
m.send(c1c, "WORLD join")
m.expect(c1c, "World join success", ":.*2200.*")
m.expect(c1c, "User mode +y set", "MODE.*\\+y")
m.expect(c1a, "c1a sees c1c mode change", "MODE.*\\+y")
m.expect(c1b, "c1b sees c1c mode change", "MODE.*\\+y")
m.clearlog()
print()

# Test 9: Verify forest world channel exists
print("[TEST] Forest world channel exists")
m.send(c1a, "JOIN #forest")
m.expect(c1a, "Joined forest channel", ".*JOIN.*#forest")
m.clearlog()
print()

# Test 10: User mode +y works in different world
print("[TEST] User mode +y in different world")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join success", ":.*2200.*")
m.expect(c1a, "User mode +y set", "MODE.*\\+y")
m.clearlog()
print()

# Test 11: User mode +y removed when leaving world
print("[TEST] User mode +y removed when leaving world")
m.send(c1a, "WORLD part")
m.expect(c1a, "World part success", ":.*2201.*")
m.expect(c1a, "User mode +y removed", "MODE.*-y")
m.clearlog()
print()

# Test 12: Verify test world channel exists
print("[TEST] Test world channel exists")
m.send(c1a, "JOIN #test")
m.expect(c1a, "Joined test channel", ".*JOIN.*#test")
m.clearlog()
print()

print("All world mode tests completed successfully!")