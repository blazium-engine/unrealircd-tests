#!/usr/bin/python3
"""
World Module - Mode tests
Tests channel mode +W and user mode +w behavior
"""

import irctestframework.irctest

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for world to work
c1a = m.new('c1a')
c1b = m.new('c1b')
c1c = m.new('c1c')
m.connect()

# Setup: Request capability
m.send(c1a, "CAP REQ :world/features")
# Check if capability is available (ACK) or not (NAK)
resp = m.expect(c1a, "Capability response", ".*ACK.*world/features|.*NAK.*world/features")
if "NAK" in str(resp):
    print("SKIP: World module not loaded - capability NAK'd")
    print("All mode tests skipped - module not available")
    exit(0)
m.clearlog()

m.send(c1b, "CAP REQ :world/features")
m.expect(c1b, "Capability acknowledged", ".*ACK.*world/features")
m.clearlog()

m.send(c1c, "CAP REQ :world/features")
m.expect(c1c, "Capability acknowledged", ".*ACK.*world/features")
m.clearlog()

# Test 1: Set channel mode +W with world_id parameter
print("[TEST] Set channel mode +W")
m.send(c1a, "JOIN #spawn")
m.send(c1a, "MODE #spawn +W spawn")
m.expect(c1a, "Channel mode set", ".*MODE.*\\+W.*spawn")
m.clearlog()
print()

# Test 2: Only ops can set +W (non-ops denied)
print("[TEST] Non-op cannot set +W")
m.send(c1b, "JOIN #spawn")
m.send(c1b, "MODE #spawn +W spawn")
m.expect(c1b, "Need ops", ".*ERR.*OPRIVSNEEDED")
m.clearlog()
print()

# Test 3: Non-op tries to remove +W
print("[TEST] Non-op cannot remove +W")
m.send(c1b, "MODE #spawn -W")
m.expect(c1b, "Need ops", ".*ERR.*OPRIVSNEEDED")
m.clearlog()
print()

# Test 4: User mode +w auto-set on WORLD join
print("[TEST] User mode +w auto-set on WORLD join")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join success", ":.*2200.*")
m.expect(c1a, "User mode +w set", "MODE.*\\+w")
m.clearlog()
print()

# Test 5: Cannot join +W channel without +w mode
print("[TEST] Cannot join +W channel without +w")
m.send(c1c, "JOIN #spawn")
# c1c has capability but not +w mode yet
# Should be able to join channel, but not speak
m.expect(c1c, "Joins channel", "JOIN.*#spawn")
m.clearlog()

# Try to speak without +w
m.send(c1c, "PRIVMSG #spawn :test")
m.expect(c1c, "Cannot speak without +w", ".*ERR.*world.*")
m.clearlog()
print()

# Test 6: WORLD join sets +w and allows speaking
print("[TEST] WORLD join allows speaking")
m.send(c1c, "WORLD join")
m.expect(c1c, "World join success", ":.*2200.*")
m.expect(c1c, "User mode +w set", "MODE.*\\+w")
m.clearlog()

# Now should be able to speak
m.send(c1c, "PRIVMSG #spawn :hello")
m.expect(c1a, "c1a sees message", "PRIVMSG.*hello")
m.expect(c1b, "c1b sees message", "PRIVMSG.*hello")
m.clearlog()
print()

# Test 7: User mode +w auto-removed on WORLD part
print("[TEST] User mode +w auto-removed on WORLD part")
m.send(c1c, "WORLD part")
m.expect(c1c, "World part success", ":.*2201.*")
m.expect(c1c, "User mode +w removed", "MODE.*-w")
m.clearlog()
print()

# Test 8: Cannot speak without +w mode
print("[TEST] Cannot speak without +w mode")
m.send(c1c, "PRIVMSG #spawn :test")
m.expect(c1c, "Cannot speak", ".*ERR.*world.*")
m.clearlog()
print()

# Test 9: User mode +w broadcast to other users
print("[TEST] User mode +w broadcast")
m.send(c1c, "WORLD join")
m.expect(c1c, "World join success", ":.*2200.*")
m.expect(c1c, "User mode +w set", "MODE.*\\+w")
m.expect(c1a, "c1a sees c1c mode change", "MODE.*\\+w")
m.expect(c1b, "c1b sees c1c mode change", "MODE.*\\+w")
m.clearlog()
print()

# Test 10: Remove channel mode +W
print("[TEST] Remove channel mode +W")
m.send(c1a, "MODE #spawn -W")
m.expect(c1a, "Channel mode removed", ".*MODE.*-W")
m.clearlog()
print()

# Test 11: Non-world channel allows normal join
print("[TEST] Non-world channel allows normal join")
m.send(c1a, "JOIN #regular")
m.send(c1b, "JOIN #regular")
m.expect(c1b, "Joins channel", "JOIN.*#regular")
m.clearlog()

# Regular channel should allow speaking without world mode
m.send(c1b, "PRIVMSG #regular :hello")
m.expect(c1a, "c1a sees message", "PRIVMSG.*hello")
m.clearlog()
print()

# Test 12: Add +W to regular channel
print("[TEST] Add +W to regular channel")
m.send(c1a, "MODE #regular +W forest")
m.expect(c1a, "Channel mode set", ".*MODE.*\\+W.*forest")
m.clearlog()
print()

# Test 13: Now regular channel requires +w
print("[TEST] Regular channel now requires +w")
m.send(c1b, "PRIVMSG #regular :test")
m.expect(c1b, "Cannot speak without +w", ".*ERR.*world.*")
m.clearlog()
print()

# Test 14: WORLD join allows speaking in +W channel
print("[TEST] WORLD join allows speaking")
m.send(c1b, "WORLD join")
m.expect(c1b, "World join success", ":.*2200.*")
m.expect(c1b, "User mode +w set", "MODE.*\\+w")
m.clearlog()

m.send(c1b, "PRIVMSG #regular :hello")
m.expect(c1a, "c1a sees message", "PRIVMSG.*hello")
m.clearlog()
print()

# Test 15: Multiple +W channels require +w
print("[TEST] Multiple +W channels require +w")
m.send(c1a, "JOIN #another")
m.send(c1a, "MODE #another +W spawn")
m.clearlog()

m.send(c1b, "JOIN #another")
m.expect(c1b, "Joins channel", "JOIN.*#another")
m.clearlog()

# With +w mode, can speak in multiple +W channels
m.send(c1b, "PRIVMSG #another :hello")
m.expect(c1a, "c1a sees message", "PRIVMSG.*hello")
m.clearlog()
print()

# Test 16: Remove +w and cannot speak in any +W channel
print("[TEST] Remove +w affects all +W channels")
m.send(c1b, "WORLD part")
m.expect(c1b, "World part success", ":.*2201.*")
m.expect(c1b, "User mode +w removed", "MODE.*-w")
m.clearlog()

m.send(c1b, "PRIVMSG #regular :test")
m.expect(c1b, "Cannot speak", ".*ERR.*world.*")
m.clearlog()

m.send(c1b, "PRIVMSG #another :test")
m.expect(c1b, "Cannot speak", ".*ERR.*world.*")
m.clearlog()
print()

print("All mode tests completed successfully!")

