#!/usr/bin/python3
"""
Chess Module - Move validation tests
Tests all piece movements and special moves
"""

import irctestframework.irctest

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for chess to work
c1a = m.new('c1a', '1')
c2a = m.new('c2a', '1')
m.connect()

# Helper function to start a game
def start_game():
    m.send(c1a, "CHESS request $c2a 600")
    m.clearlog()
    m.send(c2a, "CHESS accept $c1a")
    m.expect_all("Game starts", ":.*901.*")
    m.clearlog()

# Helper function to end a game
def end_game():
    m.send(c1a, "CHESS resign")
    m.clearlog()

# Test 1: Pawn single move
print("[TEST] Pawn single move")
start_game()
m.send(c1a, "CHESSMOVE e3")
m.expect_all("Pawn moves one square", ":.*920.*e3")
m.clearlog()
end_game()
print()

# Test 2: Pawn double move
print("[TEST] Pawn double move")
start_game()
m.send(c1a, "CHESSMOVE e4")
m.expect_all("Pawn moves two squares", ":.*920.*e4")
m.clearlog()
end_game()
print()

# Test 3: Invalid pawn move (three squares)
print("[TEST] Invalid pawn move")
start_game()
m.send(c1a, "CHESSMOVE e5")
m.expect(c1a, "Invalid move error", ":.*941.*")
m.clearlog()
end_game()
print()

# Test 4: Knight movement
print("[TEST] Knight L-shape movement")
start_game()
m.send(c1a, "CHESSMOVE Nf3")
m.expect_all("Knight moves", ":.*920.*Nf3")
m.clearlog()
end_game()
print()

# Test 5: Bishop movement
print("[TEST] Bishop diagonal movement")
start_game()
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c2a, "CHESSMOVE e5")
m.clearlog()
m.send(c1a, "CHESSMOVE Bc4")
m.expect_all("Bishop moves diagonally", ":.*920.*Bc4")
m.clearlog()
end_game()
print()

# Test 6: Castling kingside
print("[TEST] Kingside castling")
start_game()
# Setup for castling
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c2a, "CHESSMOVE e5")
m.clearlog()
m.send(c1a, "CHESSMOVE Nf3")
m.clearlog()
m.send(c2a, "CHESSMOVE Nf6")
m.clearlog()
m.send(c1a, "CHESSMOVE Bc4")
m.clearlog()
m.send(c2a, "CHESSMOVE Bc5")
m.clearlog()
# Now castle
m.send(c1a, "CHESSMOVE O-O")
m.expect_all("Kingside castling", ":.*920.*O-O")
m.clearlog()
end_game()
print()

# Test 7: Capture notation
print("[TEST] Capture move")
start_game()
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c2a, "CHESSMOVE d5")
m.clearlog()
m.send(c1a, "CHESSMOVE exd5")
m.expect_all("Capture move", ":.*920.*exd5")
m.clearlog()
end_game()
print()

# Test 8: Long algebraic notation
print("[TEST] Long algebraic notation")
start_game()
m.send(c1a, "CHESSMOVE e2-e4")
m.expect_all("Long notation accepted", ":.*920.*")
m.clearlog()
end_game()
print()

# Test 9: Check notification
print("[TEST] Check notification")
start_game()
# Setup for quick check (Scholar's Mate attempt)
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c2a, "CHESSMOVE e5")
m.clearlog()
m.send(c1a, "CHESSMOVE Qh5")
m.clearlog()
m.send(c2a, "CHESSMOVE Nc6")
m.clearlog()
m.send(c1a, "CHESSMOVE Bc4")
m.clearlog()
m.send(c2a, "CHESSMOVE Nf6")
m.clearlog()
# Queen takes pawn with check
m.send(c1a, "CHESSMOVE Qxf7")
m.expect_all("Check notification", ":.*913.*[Cc]heck")
m.clearlog()
end_game()
print()

# Test 10: Multiple games don't interfere
print("[TEST] Multiple games isolation")
# All clients must be on the same server for chess to work
c3a = m.new('c3a', '1')
c4a = m.new('c4a', '1')
# Need to manually connect the new clients
m.send_raw(c3a, "NICK $c3a")
m.send_raw(c3a, "USER c3a 0 0 :Test User")
m.send_raw(c4a, "NICK $c4a")
m.send_raw(c4a, "USER c4a 0 0 :Test User")
m.clearlog()

# Start first game
m.send(c1a, "CHESS request $c2a 300")
m.clearlog()
m.send(c2a, "CHESS accept $c1a")
m.clearlog()

# Start second game
m.send(c3a, "CHESS request $c4a 300")
m.clearlog()
m.send(c4a, "CHESS accept $c3a")
m.clearlog()

# Both games should work independently
m.send(c1a, "CHESSMOVE e4")
m.expect(c1a, "First game move", ":.*920.*")
m.expect(c2a, "First game move", ":.*920.*")
m.not_expect(c3a, "Third player unaffected", ":.*920.*")
m.clearlog()

m.send(c3a, "CHESSMOVE d4")
m.expect(c3a, "Second game move", ":.*920.*")
m.expect(c4a, "Second game move", ":.*920.*")
m.not_expect(c1a, "First player unaffected", ":.*920.*")
m.clearlog()

# Cleanup both games
m.send(c1a, "CHESS resign")
m.send(c3a, "CHESS resign")
m.clearlog()
print()

print("All chess move tests passed!")

