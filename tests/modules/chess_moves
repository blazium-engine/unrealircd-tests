#!/usr/bin/python3
"""
Chess Module - Move validation tests
Tests all piece movements and special moves
"""

import irctestframework.irctest

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for chess to work
c1a = m.new('c1a')
c1b = m.new('c1b')
m.connect()

# Helper function to start a game
def start_game():
    m.send(c1a, "CHESS request $c1b 600")
    m.clearlog()
    m.send(c1b, "CHESS accept $c1a")
    m.expect(c1a, "c1a game starts", ":.*901.*")
    m.expect(c1b, "c1b game starts", ":.*901.*")
    m.clearlog()

# Helper function to end a game
def end_game():
    m.send(c1a, "CHESS resign")
    m.clearlog()

# Test 1: Pawn single move
print("[TEST] Pawn single move")
start_game()
m.send(c1a, "CHESSMOVE e3")
m.expect(c1a, "c1a sees pawn move", ":.*920.*e3")
m.expect(c1b, "c1b sees pawn move", ":.*920.*e3")
m.clearlog()
end_game()
print()

# Test 2: Pawn double move
print("[TEST] Pawn double move")
start_game()
m.send(c1a, "CHESSMOVE e4")
m.expect(c1a, "c1a sees pawn move", ":.*920.*e4")
m.expect(c1b, "c1b sees pawn move", ":.*920.*e4")
m.clearlog()
end_game()
print()

# Test 3: Invalid pawn move (three squares)
print("[TEST] Invalid pawn move")
start_game()
m.send(c1a, "CHESSMOVE e5")
m.expect(c1a, "Invalid move error", ":.*941.*")
m.clearlog()
end_game()
print()

# Test 4: Knight movement
print("[TEST] Knight L-shape movement")
start_game()
m.send(c1a, "CHESSMOVE Nf3")
m.expect(c1a, "c1a sees knight move", ":.*920.*Nf3")
m.expect(c1b, "c1b sees knight move", ":.*920.*Nf3")
m.clearlog()
end_game()
print()

# Test 5: Bishop movement
print("[TEST] Bishop diagonal movement")
start_game()
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c1b, "CHESSMOVE e5")
m.clearlog()
m.send(c1a, "CHESSMOVE Bc4")
m.expect(c1a, "c1a sees bishop move", ":.*920.*Bc4")
m.expect(c1b, "c1b sees bishop move", ":.*920.*Bc4")
m.clearlog()
end_game()
print()

# Test 6: Castling kingside
print("[TEST] Kingside castling")
start_game()
# Setup for castling
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c1b, "CHESSMOVE e5")
m.clearlog()
m.send(c1a, "CHESSMOVE Nf3")
m.clearlog()
m.send(c1b, "CHESSMOVE Nf6")
m.clearlog()
m.send(c1a, "CHESSMOVE Bc4")
m.clearlog()
m.send(c1b, "CHESSMOVE Bc5")
m.clearlog()
# Now castle
m.send(c1a, "CHESSMOVE O-O")
m.expect(c1a, "c1a sees castling", ":.*920.*O-O")
m.expect(c1b, "c1b sees castling", ":.*920.*O-O")
m.clearlog()
end_game()
print()

# Test 7: Capture notation
print("[TEST] Capture move")
start_game()
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c1b, "CHESSMOVE d5")
m.clearlog()
m.send(c1a, "CHESSMOVE exd5")
m.expect(c1a, "c1a sees capture", ":.*920.*exd5")
m.expect(c1b, "c1b sees capture", ":.*920.*exd5")
m.clearlog()
end_game()
print()

# Test 8: Long algebraic notation
print("[TEST] Long algebraic notation")
start_game()
m.send(c1a, "CHESSMOVE e2-e4")
m.expect(c1a, "c1a sees move", ":.*920.*")
m.expect(c1b, "c1b sees move", ":.*920.*")
m.clearlog()
end_game()
print()

# Test 9: Check notification
print("[TEST] Check notification")
start_game()
# Setup for quick check (Scholar's Mate attempt)
m.send(c1a, "CHESSMOVE e4")
m.clearlog()
m.send(c1b, "CHESSMOVE e5")
m.clearlog()
m.send(c1a, "CHESSMOVE Qh5")
m.clearlog()
m.send(c1b, "CHESSMOVE Nc6")
m.clearlog()
m.send(c1a, "CHESSMOVE Bc4")
m.clearlog()
m.send(c1b, "CHESSMOVE Nf6")
m.clearlog()
# Queen takes pawn with check
m.send(c1a, "CHESSMOVE Qxf7")
m.expect(c1a, "c1a sees check", ":.*913.*[Cc]heck")
m.expect(c1b, "c1b sees check", ":.*913.*[Cc]heck")
m.clearlog()
end_game()
print()

# Test 10: Multiple games don't interfere
print("[TEST] Multiple games isolation")
# All clients must be on the same server for chess to work
c1c = m.new('c1c')
c1d = m.new('c1d')
# Need to manually connect the new clients
m.send_raw(c1c, "NICK $c1c")
m.send_raw(c1c, "USER c1c 0 0 :Test User")
m.send_raw(c1d, "NICK $c1d")
m.send_raw(c1d, "USER c1d 0 0 :Test User")
m.clearlog()

# Start first game
m.send(c1a, "CHESS request $c1b 300")
m.clearlog()
m.send(c1b, "CHESS accept $c1a")
m.clearlog()

# Start second game
m.send(c1c, "CHESS request $c1d 300")
m.clearlog()
m.send(c1d, "CHESS accept $c1c")
m.clearlog()

# Both games should work independently
m.send(c1a, "CHESSMOVE e4")
m.expect(c1a, "First game move", ":.*920.*")
m.expect(c1b, "First game move", ":.*920.*")
m.not_expect(c1c, "Third player unaffected", ":.*920.*")
m.clearlog()

m.send(c1c, "CHESSMOVE d4")
m.expect(c1c, "Second game move", ":.*920.*")
m.expect(c1d, "Second game move", ":.*920.*")
m.not_expect(c1a, "First player unaffected", ":.*920.*")
m.clearlog()

# Cleanup both games
m.send(c1a, "CHESS resign")
m.send(c1c, "CHESS resign")
m.clearlog()
print()

print("All chess move tests passed!")
