#!/usr/bin/python3
"""
World Module - Multi-Server Synchronization Test
Tests comprehensive multi-server synchronization following _pre_test pattern
"""

import sys
import os
import time
sys.path.append(os.path.dirname(__file__))

from world_multiserver_utils import (
    setup_three_server_network, verify_sync_across_servers, test_netsplit_recovery,
    verify_message_tags_all_servers, setup_world_capabilities, join_world_channel,
    verify_world_join_sync, verify_movement_sync, log_server_sync, log_multi_client
)

# Setup three-server network
m, c1a, c2a, c3a = setup_three_server_network()
clients = {"server1": c1a, "server2": c2a, "server3": c3a}

# Setup world capabilities for all clients
if not setup_world_capabilities(m, clients):
    print("SKIP: World module not loaded - capability NAK'd")
    print("All multi-server sync tests skipped - module not available")
    exit(0)

# Join world channel on all servers
join_world_channel(m, clients, "#spawn")

print("=" * 60)
print("WORLD MODULE - MULTI-SERVER SYNCHRONIZATION TESTS")
print("=" * 60)
print("Test suite started at: " + time.strftime('%Y-%m-%d %H:%M:%S'))
print()

# Test 1: User on server1 joins world
print("[TEST] User on server1 joins world")
log_multi_client(clients, "Testing world join synchronization")
verify_world_join_sync(m, clients, c1a)
print()

# Test 2: User on server2 joins world
print("[TEST] User on server2 joins world")
verify_world_join_sync(m, clients, c2a)
print()

# Test 3: User on server3 joins world
print("[TEST] User on server3 joins world")
verify_world_join_sync(m, clients, c3a)
print()

# Test 4: MOVE on server1 synced to server2 and server3
print("[TEST] MOVE on server1 synced to all servers")
log_server_sync("server1", "MOVE north", "Testing cross-server movement sync")
verify_movement_sync(m, clients, c1a, "north")
print()

# Test 5: MOVE on server2 synced to server1 and server3
print("[TEST] MOVE on server2 synced to all servers")
log_server_sync("server2", "MOVE south", "Testing cross-server movement sync")
verify_movement_sync(m, clients, c2a, "south")
print()

# Test 6: MOVE on server3 synced to server1 and server2
print("[TEST] MOVE on server3 synced to all servers")
log_server_sync("server3", "MOVE east", "Testing cross-server movement sync")
verify_movement_sync(m, clients, c3a, "east")
print()

# Test 7: FACE on server1 synced to all servers
print("[TEST] FACE on server1 synced to all servers")
m.send(c1a, "FACE west")
m.expect(c1a, "Face success", ":.*2211.*")

# All other clients should see the face change
for server_name, client in clients.items():
    if client != c1a:
        m.expect(client, server_name + " sees face", "WORLD.*FACE")
        m.expect(client, server_name + " sees location tag", "@world/location=")
        m.expect(client, server_name + " sees direction tag", "@world/direction=")

m.clearlog()
print()

# Test 8: Simultaneous movements on different servers
print("[TEST] Simultaneous movements on different servers")
log_multi_client(clients, "Testing concurrent movement synchronization")

# Start movements on all servers simultaneously
m.send(c1a, "MOVE north")
m.send(c2a, "MOVE west")
m.send(c3a, "MOVE south")

# Each server should see its own success and others' movements
m.expect(c1a, "c1a move success", ":.*2210.*")
m.expect(c2a, "c2a move success", ":.*2210.*")
m.expect(c3a, "c3a move success", ":.*2210.*")

# Cross-server sync verification
m.expect(c1a, "c1a sees c2a move", "WORLD.*MOVE")
m.expect(c1a, "c1a sees c3a move", "WORLD.*MOVE")
m.expect(c2a, "c2a sees c1a move", "WORLD.*MOVE")
m.expect(c2a, "c2a sees c3a move", "WORLD.*MOVE")
m.expect(c3a, "c3a sees c1a move", "WORLD.*MOVE")
m.expect(c3a, "c3a sees c2a move", "WORLD.*MOVE")

m.clearlog()
print()

# Test 9: Message tag validation across servers
print("[TEST] Message tag validation across servers")
m.send(c1a, "MOVE north")
m.expect(c1a, "Move success", ":.*2210.*")

# Verify all message tags are present on all servers
tags_to_verify = ["@world/location=", "@world/direction="]
verify_message_tags_all_servers(m, clients, tags_to_verify)
m.clearlog()
print()

# Test 10: User mode synchronization across servers
print("[TEST] User mode synchronization across servers")
# c1a parts from world
m.send(c1a, "WORLD part")
m.expect(c1a, "World part success", ":.*2201.*")

# All other servers should see mode change
for server_name, client in clients.items():
    if client != c1a:
        m.expect(client, server_name + " sees c1a mode change", "MODE.*-y")

m.clearlog()
print()

# Test 11: Netsplit recovery
print("[TEST] Netsplit recovery")
test_netsplit_recovery(m, clients, "#spawn")
print()

# Test 12: Rejoin after netsplit
print("[TEST] Rejoin after netsplit")
verify_world_join_sync(m, clients, c1a)
print()

# Test 13: Multiple rapid movements
print("[TEST] Multiple rapid movements")
log_multi_client(clients, "Testing rapid movement synchronization")

# Rapid movements on different servers
for i in range(3):
    m.send(c1a, "MOVE north")
    m.expect(c1a, "Move " + str(i+1) + " success", ":.*2210.*")
    
    # Other servers should see each movement
    for server_name, client in clients.items():
        if client != c1a:
            m.expect(client, server_name + " sees rapid move " + str(i+1), "WORLD.*MOVE")

m.clearlog()
print()

# Test 14: Cross-server teleportation
print("[TEST] Cross-server teleportation")
# Join forest channel on server2
m.send(c2a, "JOIN #forest")
m.clearlog()

# Move c2a to exit point (would need to move to specific coordinates)
# For now, just verify the teleport mechanism exists
m.send(c2a, "WORLD show")
m.expect(c2a, "World info", ":.*2202.*")
m.clearlog()
print()

# Test 15: Server sync with high message volume
print("[TEST] Server sync with high message volume")
log_multi_client(clients, "Testing high-volume synchronization")

# Generate many movements quickly
for i in range(5):
    directions = ["north", "south", "east", "west"]
    direction = directions[i % 4]
    
    m.send(c1a, "MOVE " + direction)
    m.expect(c1a, "High-volume move " + str(i+1), ":.*2210.*")
    
    # Verify sync to other servers
    for server_name, client in clients.items():
        if client != c1a:
            m.expect(client, server_name + " sees high-volume move " + str(i+1), "WORLD.*MOVE")

m.clearlog()
print()

# Test 16: Verify ModData synchronization
print("[TEST] ModData synchronization")
# Check that all users can see each other's positions
m.send(c1a, "WORLD show")
m.expect(c1a, "World info with all users", ":.*2202.*")

m.send(c2a, "WORLD show")
m.expect(c2a, "World info with all users", ":.*2202.*")

m.send(c3a, "WORLD show")
m.expect(c3a, "World info with all users", ":.*2202.*")

m.clearlog()
print()

# Test 17: Edge case: User disconnects during movement
print("[TEST] User disconnects during movement")
# This would require simulating a disconnect, which is complex in the test framework
# For now, we'll test that the remaining users can still move
m.send(c1a, "MOVE north")
m.expect(c1a, "Move after disconnect test", ":.*2210.*")

# Other users should still see the movement
for server_name, client in clients.items():
    if client != c1a:
        m.expect(client, server_name + " sees move after disconnect test", "WORLD.*MOVE")

m.clearlog()
print()

# Test 18: Final synchronization verification
print("[TEST] Final synchronization verification")
log_multi_client(clients, "Final sync verification")

# All users should be able to see each other
for server_name, client in clients.items():
    m.send(client, "WORLD show")
    m.expect(client, server_name + " final world info", ":.*2202.*")

m.clearlog()
print()

print("=" * 60)
print("All multi-server synchronization tests completed successfully!")
print("=" * 60)
