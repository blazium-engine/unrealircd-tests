#!/usr/bin/python3
"""
Hangman Module - Boundary conditions tests
Tests boundary conditions and limits for hangman configuration
"""

import irctestframework.irctest

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for hangman to work
c1a = m.new('c1a')
c1b = m.new('c1b')
c1c = m.new('c1c')
m.connect()

# Test 1: Min players (2)
print("[TEST] Min players (2)")
m.send(c1a, "HANGMAN CREATE 2 30")
m.expect(c1a, "c1a creates min player lobby", ":.*2500.*")
invite_line = m.expect(c1a, "c1a gets invite code", ":.*2505.*")
invite_code = invite_line.split()[-1] if invite_line else None
m.clearlog()

if invite_code:
    m.send(c1b, f"HANGMAN JOIN {invite_code}")
else:
    m.send(c1b, "HANGMAN JOIN ABC12345")
m.expect(c1b, "c1b joins min lobby", ":.*2503.*")
m.clearlog()

m.send(c1a, "HANGMAN START")
m.expect(c1a, "c1a starts min player game", ":.*2510.*")
m.clearlog()
print()

# Leave the min player lobby before creating max player lobby
m.send(c1a, "HANGMAN LEAVE")
m.clearlog()
m.send(c1b, "HANGMAN LEAVE")
m.clearlog()

# Test 2: Max players (10)
# Note: c1c didn't leave, so if he tries to join, he'll be in his old lobby still
print("[TEST] Max players (10)")
m.send(c1a, "HANGMAN CREATE 10 30")
m.expect(c1a, "c1a creates max player lobby", ":.*2500.*")
max_invite_line = m.expect(c1a, "c1a gets max invite code", ":.*2505.*")
max_invite_code = max_invite_line.split()[-1] if max_invite_line else None
m.clearlog()

if max_invite_code:
    m.send(c1b, f"HANGMAN JOIN {max_invite_code}")
else:
    m.send(c1b, "HANGMAN JOIN ABC12345")
m.expect(c1b, "c1b joins max lobby", ":.*2503.*")
m.clearlog()

if max_invite_code:
    m.send(c1c, f"HANGMAN JOIN {max_invite_code}")
else:
    m.send(c1c, "HANGMAN JOIN ABC12345")
m.expect(c1c, "c1c joins max lobby", ":.*2503.*")
m.clearlog()
print()

# Test 3: Min word length (3)
print("[TEST] Min word length (3)")
m.send(c1a, "HANGMAN START")
m.expect(c1a, "c1a starts game", ":.*2510.*")
m.clearlog()

m.send(c1a, "HANGMANWORD ABC")
m.expect(c1a, "c1a sets min length word", ":.*2512.*")
m.expect(c1a, "c1a sees min length display", ":.*2513.*")
m.clearlog()

# End the round by having guesser correctly guess the word
m.send(c1b, "HANGMANGUESS ABC")
m.expect(c1b, "c1b guesses the word", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 4: Max word length (20)
# After guesser wins, dealer rotates to c1b
print("[TEST] Max word length (20)")
m.send(c1b, "HANGMANWORD ABCDEFGHIJKLMNOPQRST")
m.expect(c1b, "c1b sets max length word", ":.*2512.*")
m.expect(c1b, "c1b sees max length display", ":.*2513.*")
m.clearlog()
print()

# End the round so we can set another word (have guessers guess the word)
m.send(c1a, "HANGMANGUESS ABCDEFGHIJKLMNOPQRST")
m.expect(c1a, "c1a guesses the word", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 5: Min timeout (30s) via config
print("[TEST] Min timeout (30s)")
# This would test configuration limits
# After c1a guesses correctly in Test 4, dealer rotates from c1b to c1c (order: c1a, c1b, c1c)
m.send(c1c, "HANGMANWORD TIMEOUTTEST")
m.expect(c1c, "c1c sets word", ":.*2512.*")
# Would test 30s timeout behavior
m.clearlog()
print()

# End the round so we can set another word
m.send(c1a, "HANGMANGUESS TIMEOUTTEST")
m.expect(c1a, "c1a guesses the word", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 6: Max timeout appears in config
print("[TEST] Max timeout (600s) appears in config")
# Just verify timeout appears in ISUPPORT
# No test to actually set 600s timeout word
m.clearlog()
print()


# Test 7: Min health (1) via config
print("[TEST] Min health (1)")
# This would test configuration limits
# c1a is the new dealer
m.send(c1a, "HANGMANWORD MINHEALTH")
m.expect(c1a, "c1a sets word", ":.*2512.*")
# Would test min health behavior
m.clearlog()
print()

# End the round so we can set another word
m.send(c1b, "HANGMANGUESS MINHEALTH")
m.expect(c1b, "c1b guesses the word", ":.*2522.*")
m.clearlog()
print()

# Test 8: Max health (20) via config
print("[TEST] Max health (20) appears in config")
# Just verify max health appears in ISUPPORT
# No test to actually set word
m.clearlog()
print()

# Test 9: Point limit 0 (unlimited)
print("[TEST] Point limit 0 (unlimited)")
m.send(c1a, "HANGMAN CREATE 3 0")
m.expect(c1a, "c1a creates unlimited point lobby", ":.*2500.*")
m.clearlog()
print()

# Test 10: Max point limit (1000)
print("[TEST] Max point limit (1000)")
m.send(c1a, "HANGMAN CREATE 3 1000")
m.expect(c1a, "c1a creates max point lobby", ":.*2500.*")
m.clearlog()
print()

print("All hangman boundaries tests passed!")
