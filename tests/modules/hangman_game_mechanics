#!/usr/bin/python3
"""
Hangman Module - Game mechanics tests
Tests game flow, rules, word validation, and phase transitions
"""

import irctestframework.irctest

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for hangman to work
c1a = m.new('c1a')
c1b = m.new('c1b')
c1c = m.new('c1c')
m.connect()

# Test 1: Word validation (1-20 chars, letters and spaces)
print("[TEST] Word validation - valid word")
m.send(c1a, "HANGMAN CREATE 3 50")
m.expect(c1a, "c1a creates lobby", ":.*2500.*")
invite_line = m.expect(c1a, "c1a gets invite code", ":.*2505.*")
invite_code = invite_line.split()[-1] if invite_line else None
m.clearlog()

if invite_code:
    m.send(c1b, f"HANGMAN JOIN {invite_code}")
else:
    m.send(c1b, "HANGMAN JOIN ABC12345")
m.expect(c1b, "c1b joins lobby", ":.*2503.*")
m.clearlog()

if invite_code:
    m.send(c1c, f"HANGMAN JOIN {invite_code}")
else:
    m.send(c1c, "HANGMAN JOIN ABC12345")
m.expect(c1c, "c1c joins lobby", ":.*2503.*")
m.clearlog()

m.send(c1a, "HANGMAN START")
m.expect(c1a, "c1a starts game", ":.*2510.*")
m.clearlog()

m.send(c1a, "HANGMANWORD VALIDWORD")
m.expect(c1a, "c1a sets valid word", ":.*2512.*")
m.clearlog()

# End round by guessing correctly (dealer rotates to c1b)
m.send(c1b, "HANGMANGUESS VALIDWORD")
m.expect(c1b, "c1b guesses correctly", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 2: Word with spaces handling
# Note: After rotation, c1b is now the dealer
print("[TEST] Word with spaces")
m.send(c1b, "HANGMANWORD HELLO WORLD")
m.expect(c1b, "c1b sets word with spaces", ":.*2512.*")
m.expect(c1a, "c1a sees display with spaces", ":.*2513.*")
m.clearlog()

# End round by guessing correctly (dealer rotates to c1c)
m.send(c1a, "HANGMANGUESS HELLO WORLD")
m.expect(c1a, "c1a guesses correctly", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 3: Word reuse prevention
# Wait for dealer rotation to c1c
m.expect(c1c, "c1c sees round 3 started", ":.*Round 3 started.*Dealer: c1c.*")
m.expect(c1c, "c1c is dealer", ":.*Word Setting.*")
m.clearlog()

# After rotation, c1c is now the dealer
print("[TEST] Word reuse prevention")
m.send(c1c, "HANGMANWORD HELLO WORLD")
m.expect(c1c, "c1c gets word reuse error", ":.*2543.*")

# Set a different word for next tests
m.send(c1c, "HANGMANWORD TESTING")
m.expect(c1c, "c1c sets word", ":.*2512.*")
m.clearlog()
print()

# Test 4: Already guessed letter rejection
print("[TEST] Already guessed letter")
# 'H' is incorrect in "TESTING", but we'll guess T (correct) first
m.send(c1b, "HANGMANGUESS T")
m.expect(c1b, "c1b guesses T correctly", ":.*2520.*")
m.clearlog()

# c1a guesses the same letter (T) - should get already guessed error
m.send(c1a, "HANGMANGUESS T")
m.expect(c1a, "c1a gets already guessed error", ":.*2544.*")
m.clearlog()
print()

# Test 5: LETTERS command (show guessed letters)
print("[TEST] LETTERS command")
m.send(c1a, "HANGMAN LETTERS")
m.expect(c1a, "c1a gets letters list", ":.*2525.*")
m.clearlog()
print()

# Test 6: STATUS command (game state)
print("[TEST] STATUS command")
m.send(c1a, "HANGMAN STATUS")
m.expect(c1a, "c1a gets game status", ":.*2513.*")
m.expect(c1a, "c1a gets health status", ":.*2514.*")
m.clearlog()
print()

# Test 7: Display update after guesses
print("[TEST] Display update after guesses")
m.send(c1b, "HANGMANGUESS E")
m.expect(c1b, "c1b guesses E", ":.*2520.*")
m.expect(c1a, "c1a sees display update", ":.*2513.*")
m.clearlog()
print()

# Test 8: Health decrease on wrong guess
print("[TEST] Health decrease on wrong guess")
# c1a guesses wrong (c1c is dealer, can't guess)
m.send(c1a, "HANGMANGUESS Z")
m.expect(c1a, "c1a gets wrong guess", ":.*2521.*")
m.expect(c1a, "c1a sees health decrease", ":.*2514.*")
m.clearlog()
print()

# Test 9: Complete word reveal
print("[TEST] Complete word reveal")
# Guess the complete word "TESTING" (not "HELLO WORLD" from earlier test)
m.send(c1b, "HANGMANGUESS TESTING")
m.expect(c1b, "c1b guesses complete word", ":.*2522.*")
m.expect(c1a, "c1a sees word revealed", ":.*2513.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 10: Dealer cannot skip turn (dealers cannot use SKIP)
print("[TEST] Dealer skip turn")
m.send(c1a, "HANGMANWORD NEWWORD")
m.expect(c1a, "c1a sets new word", ":.*2512.*")
m.clearlog()

# Dealer tries to skip, should be rejected
m.send(c1a, "HANGMAN SKIP")
m.expect(c1a, "c1a cannot skip as dealer", "Dealers cannot skip")
m.clearlog()

# Guess correctly to end round instead
m.send(c1b, "HANGMANGUESS NEWWORD")
m.expect(c1b, "c1b guesses correctly", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 11: Timeout handling (word setting phase)
# Note: After Test 10, c1b is now dealer
print("[TEST] Word setting timeout")
# This test verifies MAKING SURE c1b is dealer and word can be set
m.send(c1b, "HANGMANWORD TESTWORD")
m.expect(c1b, "c1b sets word", ":.*2512.*")
m.clearlog()

# End the round so we can test next timeout scenario
m.send(c1a, "HANGMANGUESS TESTWORD")
m.expect(c1a, "c1a guesses correctly", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Test 12: Timeout handling (guessing phase)
print("[TEST] Guessing timeout")
# After rotation, c1c is now dealer
m.send(c1c, "HANGMANWORD GUESSTIMEOUT")
m.expect(c1c, "c1c sets word", ":.*2512.*")
# Wait for timeout (simplified test - in real test would wait)
m.clearlog()
print()

# After last test, c1c is dealer, need to end round first
m.send(c1a, "HANGMANGUESS GUESSTIMEOUT")
m.expect(c1a, "c1a guesses correctly", ":.*2522.*")
m.expect(c1a, "c1a sees round end", ":.*2517.*")
m.expect(c1b, "c1b sees round end", ":.*2517.*")
m.expect(c1c, "c1c sees round end", ":.*2517.*")
m.clearlog()
print()

# Start a new game first
# Test 13: Timer warnings (60s, 30s, 10s)
print("[TEST] Timer warnings")
m.send(c1a, "HANGMAN START")
m.expect(c1a, "c1a starts game", ":.*2510.*")
m.expect(c1b, "c1b gets game start", ":.*2510.*")
m.expect(c1c, "c1c gets game start", ":.*2510.*")
m.clearlog()

# After game start, c1a is dealer
m.send(c1a, "HANGMANWORD WARNINGTEST")
m.expect(c1a, "c1a sets word", ":.*2512.*")
m.clearlog()
print()

# Test 14: Phase transitions
print("[TEST] Phase transitions")
m.send(c1a, "HANGMAN STATUS")
m.expect(c1a, "c1a gets current phase", ":.*2513.*")
m.clearlog()
print()

print("All hangman game mechanics tests passed!")
