#!/usr/bin/python3
"""
World Module - Basic functionality tests
Tests world capability, join, movement, and basic commands with JSON validation
"""

import irctestframework.irctest
import time

print("=" * 60)
print("WORLD MODULE - BASIC FUNCTIONALITY TESTS")
print("=" * 60)
print(f"Test started at: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for world to work
c1a = m.new('c1a')
c1b = m.new('c1b')
print(f"[LOG] Created test clients: c1a={c1a.name}, c1b={c1b.name}")
m.connect()
print(f"[LOG] Connected to IRC server")
print()

# Test 1: Client requests world capability
print("[TEST] Request world capability")
print(f"[LOG] Sending CAP REQ :world/features to {c1a.name}")
m.send(c1a, "CAP REQ :world/features")
# Check if capability is available (ACK) or not (NAK)
resp = m.expect(c1a, "Capability response", ".*ACK.*world/features|.*NAK.*world/features")
print(f"[LOG] Received capability response: {resp}")
if "NAK" in str(resp):
    print("SKIP: World module not loaded - capability NAK'd")
    print("All basic tests skipped - module not available")
    exit(0)
print(f"[LOG] World module capability confirmed - proceeding with tests")

print()

# Test 2: Join world channel (created from config)
print("[TEST] Join world channel")
print(f"[LOG] Attempting to join #spawn channel")
m.send(c1a, "JOIN #spawn")
join_resp = m.expect(c1a, "Joined spawn channel", ".*JOIN.*#spawn")
print(f"[LOG] Join response: {join_resp}")

print()

# Test 3: Attempt join without capability (should fail)
print("[TEST] Join without capability")
m.send(c1b, "JOIN #spawn")
m.expect(c1b, "Join denied", ".*ERR.*world.*cap")

print()

# Test 4: Client b requests capability
print("[TEST] Client b requests capability")
m.send(c1b, "CAP REQ :world/features")
m.expect(c1b, "Capability acknowledged", ".*ACK.*world/features")

print()

# Test 5: Join world channel
print("[TEST] Join world channel")
m.send(c1b, "JOIN #spawn")
m.expect(c1b, "Joins channel", "JOIN.*#spawn")

print()

# Test 6: WORLD join command with JSON validation
print("[TEST] WORLD join command with JSON")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join confirmation", ":.*2200.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")
m.expect(c1a, "User mode +y set", "MODE.*\\+y")

print()

# Test 7: MOVE command with message tags
print("[TEST] MOVE command with tags")
m.send(c1a, "MOVE north")
m.expect(c1a, "Move confirmation", ":.*2210.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")

print()

# Test 8: FACE command
print("[TEST] FACE command")
m.send(c1a, "FACE east")
m.expect(c1a, "Face confirmation", ":.*2211.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")

print()

# Test 9: WORLD show info with JSON validation
print("[TEST] WORLD show info with JSON")
m.send(c1a, "WORLD show")
m.expect(c1a, "World info received", ":.*2202.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")

print()

# Test 10: Multiple users in world
print("[TEST] Multiple users in world")
m.send(c1b, "WORLD join")
m.expect(c1b, "c1b world join", ":.*2200.*")
m.expect(c1b, "c1b user mode +y", "MODE.*\\+y")
m.expect(c1a, "c1a sees c1b join broadcast", "WORLD.*JOIN")

print()

# Test 11: WORLD part command
print("[TEST] WORLD part command")
m.send(c1a, "WORLD part")
m.expect(c1a, "World part confirmation", ":.*2201.*")
m.expect(c1a, "User mode +y removed", "MODE.*-y")

print()

# Test 12: Rejoin world preserves position
print("[TEST] Rejoin world")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join confirmation", ":.*2200.*")
m.expect(c1a, "User mode +y set", "MODE.*\\+y")

# Test 13: Validate all numeric replies in range 2200-2250
print("[TEST] Validate numeric replies range 2200-2250")
print(f"[LOG] Testing numeric reply validation")

# Test RPL_WORLDJOIN (2200)
m.send(c1a, "WORLD join")
m.expect(c1a, "RPL_WORLDJOIN (2200)", ":.*2200.*")
m.clearlog()

# Test RPL_WORLDPART (2201)
m.send(c1a, "WORLD part")
m.expect(c1a, "RPL_WORLDPART (2201)", ":.*2201.*")
m.clearlog()

# Test RPL_WORLDSHOW (2202)
m.send(c1a, "WORLD join")
m.expect(c1a, "RPL_WORLDJOIN (2200)", ":.*2200.*")
m.send(c1a, "WORLD show")
m.expect(c1a, "RPL_WORLDSHOW (2202)", ":.*2202.*")
m.clearlog()

# Test RPL_WORLDMOVE (2210)
m.send(c1a, "MOVE north")
m.expect(c1a, "RPL_WORLDMOVE (2210)", ":.*2210.*")
m.clearlog()

# Test RPL_WORLDFACE (2211)
m.send(c1a, "FACE east")
m.expect(c1a, "RPL_WORLDFACE (2211)", ":.*2211.*")
m.clearlog()

# Test RPL_WORLDTELEPORT (2212) - if teleportation is available
m.send(c1a, "WORLD teleport forest")
resp = m.expect(c1a, "RPL_WORLDTELEPORT (2212) or error", ":.*2212.*|:.*2249.*")
if ":.*2212.*" in str(resp):
    print(f"[LOG] RPL_WORLDTELEPORT (2212) confirmed")
else:
    print(f"[LOG] Teleportation not available or not at exit")
m.clearlog()

# Test RPL_WORLDSAVE (2250)
m.send(c1a, "WORLD save")
m.expect(c1a, "RPL_WORLDSAVE (2250)", ":.*2250.*")
m.clearlog()

print()

# Test 14: Capability negotiation edge cases
print("[TEST] Capability negotiation edge cases")
print(f"[LOG] Testing capability edge cases")

# Test capability without REQ
m.send(c1b, "CAP LS")
resp = m.expect(c1b, "CAP LS response", ".*world/features.*")
if "world/features" in str(resp):
    print(f"[LOG] world/features capability listed in CAP LS")
else:
    print(f"[LOG] world/features capability not listed in CAP LS")
m.clearlog()

print()

# Test 15: User mode +y verification
print("[TEST] User mode +y verification")
print(f"[LOG] Testing user mode +y behavior")

# Join world and verify mode is set
m.send(c1a, "WORLD join")
m.expect(c1a, "World join with mode", ":.*2200.*")
m.expect(c1a, "User mode +y set", "MODE.*\\+y")
m.clearlog()

# Verify mode is visible to other users
m.send(c1b, "WHOIS " + c1a.name)
m.expect(c1b, "WHOIS shows +y mode", ".*\\+y.*")
m.clearlog()

# Part from world and verify mode is removed
m.send(c1a, "WORLD part")
m.expect(c1a, "World part with mode removal", ":.*2201.*")
m.expect(c1a, "User mode -y removed", "MODE.*-y")
m.clearlog()

# Verify mode is no longer visible
m.send(c1b, "WHOIS " + c1a.name)
m.expect(c1b, "WHOIS without +y mode", ".*(?!\\+y).*")
m.clearlog()

print()

print("All basic tests completed successfully!")

