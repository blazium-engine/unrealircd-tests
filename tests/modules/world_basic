#!/usr/bin/python3
"""
World Module - Basic functionality tests
Tests world capability, join, movement, and basic commands with JSON validation
"""

import irctestframework.irctest
import time

print("=" * 60)
print("WORLD MODULE - BASIC FUNCTIONALITY TESTS")
print("=" * 60)
print(f"Test started at: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

m = irctestframework.irctest.IrcTest()
# All clients must be on the same server for world to work
c1a = m.new('c1a')
c1b = m.new('c1b')
print(f"[LOG] Created test clients: c1a={c1a.name}, c1b={c1b.name}")
m.connect()
print(f"[LOG] Connected to IRC server")
print()

# Test 1: Client requests world capability
print("[TEST] Request world capability")
print(f"[LOG] Sending CAP REQ :world/features to {c1a.name}")
m.send(c1a, "CAP REQ :world/features")
# Check if capability is available (ACK) or not (NAK)
resp = m.expect(c1a, "Capability response", ".*ACK.*world/features|.*NAK.*world/features")
print(f"[LOG] Received capability response: {resp}")
if "NAK" in str(resp):
    print("SKIP: World module not loaded - capability NAK'd")
    print("All basic tests skipped - module not available")
    exit(0)
print(f"[LOG] World module capability confirmed - proceeding with tests")
m.clearlog()
print()

# Test 2: Join world channel (created from config)
print("[TEST] Join world channel")
print(f"[LOG] Attempting to join #spawn channel")
m.send(c1a, "JOIN #spawn")
join_resp = m.expect(c1a, "Joined spawn channel", ".*JOIN.*#spawn")
print(f"[LOG] Join response: {join_resp}")
m.clearlog()
print()

# Test 3: Attempt join without capability (should fail)
print("[TEST] Join without capability")
m.send(c1b, "JOIN #spawn")
m.expect(c1b, "Join denied", ".*ERR.*world.*cap")
m.clearlog()
print()

# Test 4: Client b requests capability
print("[TEST] Client b requests capability")
m.send(c1b, "CAP REQ :world/features")
m.expect(c1b, "Capability acknowledged", ".*ACK.*world/features")
m.clearlog()
print()

# Test 5: Join world channel
print("[TEST] Join world channel")
m.send(c1b, "JOIN #spawn")
m.expect(c1b, "Joins channel", "JOIN.*#spawn")
m.clearlog()
print()

# Test 6: WORLD join command with JSON validation
print("[TEST] WORLD join command with JSON")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join confirmation", ":.*2200.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")
m.expect(c1a, "User mode +y set", "MODE.*\\+y")
m.clearlog()
print()

# Test 7: MOVE command with message tags
print("[TEST] MOVE command with tags")
m.send(c1a, "MOVE north")
m.expect(c1a, "Move confirmation", ":.*2210.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")
m.clearlog()
print()

# Test 8: FACE command
print("[TEST] FACE command")
m.send(c1a, "FACE east")
m.expect(c1a, "Face confirmation", ":.*2211.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")
m.clearlog()
print()

# Test 9: WORLD show info with JSON validation
print("[TEST] WORLD show info with JSON")
m.send(c1a, "WORLD show")
m.expect(c1a, "World info received", ":.*2202.*")
m.expect(c1a, "JSON data tag", "@unrealircd.org/world-data=")
m.clearlog()
print()

# Test 10: Multiple users in world
print("[TEST] Multiple users in world")
m.send(c1b, "WORLD join")
m.expect(c1b, "c1b world join", ":.*2200.*")
m.expect(c1b, "c1b user mode +y", "MODE.*\\+y")
m.expect(c1a, "c1a sees c1b join broadcast", "WORLD.*JOIN")
m.clearlog()
print()

# Test 11: WORLD part command
print("[TEST] WORLD part command")
m.send(c1a, "WORLD part")
m.expect(c1a, "World part confirmation", ":.*2201.*")
m.expect(c1a, "User mode +y removed", "MODE.*-y")
m.clearlog()
print()

# Test 12: Rejoin world preserves position
print("[TEST] Rejoin world")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join confirmation", ":.*2200.*")
m.expect(c1a, "User mode +y set", "MODE.*\\+y")
m.clearlog()
print()

print("All basic tests completed successfully!")

