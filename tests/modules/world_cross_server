#!/usr/bin/python3
"""
World Module - Cross-server tests
Tests multi-server synchronization and message tag propagation
"""

import irctestframework.irctest

m = irctestframework.irctest.IrcTest()
# Set up two servers for cross-server testing
c1a = m.new('c1a')  # Client on server 1
c2a = m.new('c2a')  # Client on server 2
m.connect()

# Setup: Request capability on both servers
m.send(c1a, "CAP REQ :world/features")
# Check if capability is available (ACK) or not (NAK)
resp = m.expect(c1a, "Capability response", ".*ACK.*world/features|.*NAK.*world/features")
if "NAK" in str(resp):
    print("SKIP: World module not loaded - capability NAK'd")
    print("All cross-server tests skipped - module not available")
    exit(0)
m.clearlog()

m.send(c2a, "CAP REQ :world/features")
m.expect(c2a, "Capability acknowledged", ".*ACK.*world/features")
m.clearlog()

# Create world channel on server 1
m.send(c1a, "JOIN #spawn")
m.send(c1a, "MODE #spawn +W spawn")
m.clearlog()

# Join channel on server 2
m.send(c2a, "JOIN #spawn")
m.clearlog()

# Test 1: User on server1 joins world
print("[TEST] User on server1 joins world")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join success", ":.*2200.*")
m.expect(c1a, "User mode +w set", "MODE.*\\+w")
m.clearlog()
print()

# Test 2: User on server2 sees join broadcast
print("[TEST] User on server2 sees join broadcast")
m.expect(c2a, "c2a sees c1a join", "WORLD.*JOIN")
m.clearlog()
print()

# Test 3: User on server2 sees mode change
print("[TEST] User on server2 sees mode change")
m.expect(c2a, "c2a sees c1a mode +w", "MODE.*\\+w")
m.clearlog()
print()

# Test 4: MOVE on server1 synced to server2
print("[TEST] MOVE on server1 synced to server2")
m.send(c1a, "MOVE north")
m.expect(c1a, "Move success", ":.*2210.*")
m.expect(c2a, "c2a sees c1a move", "WORLD.*MOVE")
m.clearlog()
print()

# Test 5: Verify message tags propagate
print("[TEST] Message tags propagate")
# Check that location tag is present in broadcast
m.expect(c2a, "Location tag present", "@world/location=")
m.clearlog()
print()

# Test 6: FACE on server1 synced to server2
print("[TEST] FACE on server1 synced to server2")
m.send(c1a, "FACE east")
m.expect(c1a, "Face success", ":.*2211.*")
m.expect(c2a, "c2a sees c1a face", "WORLD.*FACE")
m.clearlog()
print()

# Test 7: User on server2 joins world
print("[TEST] User on server2 joins world")
m.send(c2a, "WORLD join")
m.expect(c2a, "World join success", ":.*2200.*")
m.expect(c2a, "User mode +w set", "MODE.*\\+w")
m.clearlog()
print()

# Test 8: User on server1 sees server2 join
print("[TEST] User on server1 sees server2 join")
m.expect(c1a, "c1a sees c2a join", "WORLD.*JOIN")
m.clearlog()
print()

# Test 9: Both users can move independently
print("[TEST] Both users can move independently")
m.send(c1a, "MOVE south")
m.expect(c1a, "Move success", ":.*2210.*")
m.expect(c2a, "c2a sees c1a move", "WORLD.*MOVE")
m.clearlog()

m.send(c2a, "MOVE west")
m.expect(c2a, "Move success", ":.*2210.*")
m.expect(c1a, "c1a sees c2a move", "WORLD.*MOVE")
m.clearlog()
print()

# Test 10: MOVE broadcasts include location tags
print("[TEST] MOVE broadcasts include location tags")
m.send(c1a, "MOVE east")
m.expect(c1a, "Move success", ":.*2210.*")
m.expect(c2a, "Location tag in broadcast", "@world/location=")
m.expect(c2a, "Direction tag in broadcast", "@world/direction=")
m.clearlog()
print()

# Test 11: Cross-server teleportation
print("[TEST] Cross-server teleportation")
# Create forest channel on server 2
m.send(c2a, "JOIN #forest")
m.send(c2a, "MODE #forest +W forest")
m.clearlog()

# Move c1a to exit point (would need to move to 9,5 in spawn)
# This is complex, so we'll just verify the teleport mechanism exists
m.send(c1a, "WORLD show")
m.expect(c1a, "World info", ":.*2202.*")
m.clearlog()
print()

# Test 12: WORLD USERS shows users from all servers
print("[TEST] WORLD USERS shows all users")
# Both users are in world
m.send(c1a, "WORLD show")
m.expect(c1a, "World info", ":.*2202.*")
m.clearlog()

m.send(c2a, "WORLD show")
m.expect(c2a, "World info", ":.*2202.*")
m.clearlog()
print()

# Test 13: Server split handling
print("[TEST] Server split handling")
# Simulate server split by parting
m.send(c1a, "WORLD part")
m.expect(c1a, "World part success", ":.*2201.*")
m.expect(c1a, "User mode +w removed", "MODE.*-w")
m.clearlog()

# Server2 should see the part
m.expect(c2a, "c2a sees c1a part", "WORLD.*PART")
m.clearlog()
print()

# Test 14: Rejoin after split
print("[TEST] Rejoin after split")
m.send(c1a, "WORLD join")
m.expect(c1a, "World join success", ":.*2200.*")
m.expect(c1a, "User mode +w set", "MODE.*\\+w")
m.clearlog()

# Server2 should see rejoin
m.expect(c2a, "c2a sees c1a rejoin", "WORLD.*JOIN")
m.clearlog()
print()

# Test 15: Multiple users on different servers
print("[TEST] Multiple users on different servers")
# Add a third client
c1b = m.new('c1b')
m.send(c1b, "CAP REQ :world/features")
m.expect(c1b, "Capability acknowledged", ".*ACK.*world/features")
m.clearlog()

m.send(c1b, "JOIN #spawn")
m.clearlog()

m.send(c1b, "WORLD join")
m.expect(c1b, "World join success", ":.*2200.*")
m.clearlog()

# Server2 should see third user join
m.expect(c2a, "c2a sees c1b join", "WORLD.*JOIN")
m.clearlog()

# Server1 users should see third user
m.expect(c1a, "c1a sees c1b join", "WORLD.*JOIN")
m.clearlog()
print()

# Test 16: All users can see each other's movements
print("[TEST] All users see each other's movements")
m.send(c1a, "MOVE north")
m.expect(c1a, "Move success", ":.*2210.*")
m.expect(c1b, "c1b sees c1a move", "WORLD.*MOVE")
m.expect(c2a, "c2a sees c1a move", "WORLD.*MOVE")
m.clearlog()

m.send(c2a, "MOVE south")
m.expect(c2a, "Move success", ":.*2210.*")
m.expect(c1a, "c1a sees c2a move", "WORLD.*MOVE")
m.expect(c1b, "c1b sees c2a move", "WORLD.*MOVE")
m.clearlog()

m.send(c1b, "MOVE east")
m.expect(c1b, "Move success", ":.*2210.*")
m.expect(c1a, "c1a sees c1b move", "WORLD.*MOVE")
m.expect(c2a, "c2a sees c1b move", "WORLD.*MOVE")
m.clearlog()
print()

# Test 17: Message tags work across servers
print("[TEST] Message tags work across servers")
m.send(c1a, "FACE west")
m.expect(c1a, "Face success", ":.*2211.*")
m.expect(c2a, "Location tag", "@world/location=")
m.expect(c2a, "Direction tag", "@world/direction=")
m.clearlog()
print()

# Test 18: User mode synchronization
print("[TEST] User mode synchronization")
# c1a parts
m.send(c1a, "WORLD part")
m.expect(c1a, "World part success", ":.*2201.*")
m.clearlog()

# c2a should see mode change
m.expect(c2a, "c2a sees c1a mode change", "MODE.*-w")
m.clearlog()

# c1b should also see mode change
m.expect(c1b, "c1b sees c1a mode change", "MODE.*-w")
m.clearlog()
print()

print("All cross-server tests completed successfully!")

