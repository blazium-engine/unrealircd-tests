#!/usr/bin/python3
"""
Chess Module - Reconnection Tests
Tests the rejoin functionality when players disconnect (v2 feature)
"""

import irctestframework.irctest

m = irctestframework.irctest.IrcTest()

# Create clients
c1a = m.new('c1a')
c1b = m.new('c1b')
m.connect()

# Test 1: Player disconnect during game
print("[TEST] Player disconnect with grace period")
m.send(c1a, "CHESS request $c1b 600")
m.clearlog()
m.send(c1b, "CHESS accept $c1a")
m.clearlog()

# Make a move
m.send(c1a, "CHESSMOVE e4")
m.clearlog()

# c1b disconnects - note: client will close after QUIT
# We need to check c1a's notification before trying to sync
c1b.send_raw("QUIT :Connection lost")
# Give server time to process
import time
time.sleep(0.5)
m.expect(c1a, "c1a notified of disconnect", "NOTICE.*disconnected")
m.clearlog()
print()

# Test 2: Rejoin with key
print("[TEST] Rejoin after disconnect")
# Note: In real test, we'd need to get the rejoin key from the 915 numeric
# For now, test the basic flow

# Create new client to simulate reconnect
c1b_new = m.new('c1b_reconnect')
m.connect()
m.clearlog()

# Try to rejoin without key (should fail)
m.send(c1b_new, "CHESS rejoin invalid-key")
m.expect(c1b_new, "Invalid key error", ":.*949.*")
m.clearlog()
print()

# Test 3: Grace period expiration
print("[TEST] Grace period expiration")
m.send(c1a, "CHESS request $c1b 300")
m.clearlog()
m.send(c1b, "CHESS accept $c1a")
m.clearlog()

# Player quits
m.send(c1b, "QUIT :Lost connection")
m.expect(c1a, "Disconnect notification", "NOTICE.*disconnected")
m.clearlog()

# After grace period, game should auto-forfeit
# (In real test, we'd wait for the timeout event)
print()

# Test 4: Multiple disconnects
print("[TEST] Both players disconnect")
m.send(c1a, "CHESS request $c1b 300")
m.clearlog()
m.send(c1b, "CHESS accept $c1a")
m.clearlog()

# Both players disconnect
m.send(c1a, "QUIT :Connection reset")
m.send(c1b, "QUIT :Connection reset")
m.clearlog()
# Game should be marked as abandoned
print()

# Test 5: Player part channel during game
print("[TEST] Player part channel during game")
c1a_new = m.new('c1a_new')
c1b_new2 = m.new('c1b_new')
m.connect()

m.send(c1a_new, "CHESS request $c1b 600")
m.clearlog()
m.send(c1b_new, "CHESS accept $c1a")
m.clearlog()

# Player parts the chess channel (should get warning about rejoining)
# Get the channel name from the JOIN message
m.send(c1a_new, "CHESSMOVE e4")
m.clearlog()

# Note: PART from chess channel is restricted, test would need the actual channel name
print()

print("All reconnection tests passed!")

